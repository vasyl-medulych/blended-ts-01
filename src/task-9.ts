// interface Container<T> {
//   items: T[];
//   addItem(item: T): void;
//   getItem(index: number): T;
// }

// const numberContainer: Container<number> = {
//   items: [1, 2, 3],
//   addItem(item) {
//     this.items.push(item);
//   },
//   getItem(index) {
//     return this.items[index];
//   },
// };

// const stringContainer: Container<string> = {
//   items: ["1", "2", "3"],
//   addItem(item) {
//     this.items.push(item);
//   },
//   getItem(index) {
//     return this.items[index];
//   },
// };

// numberContainer.addItem(7);
// stringContainer.addItem("Hello");

// function getLastElement<T>(items: T[]): T {
//   return items[items.length - 1];
// }

// console.log(getLastElement(numberContainer.items));
// console.log(getLastElement(stringContainer.items));

// –°—Ç–≤–æ—Ä–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å Pair<T>, —è–∫–∏–π –æ–ø–∏—Å—É—î –ø–∞—Ä—É –∑–Ω–∞—á–µ–Ω—å –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É:
// –ø–æ–ª–µ first ‚Äî –ø–µ—Ä—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É T
// –ø–æ–ª–µ second ‚Äî –¥—Ä—É–≥–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É T

// –°—Ç–≤–æ—Ä–∏ –¥–≤—ñ –∑–º—ñ–Ω–Ω—ñ:
// numberPair, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –¥–≤–∞ —á–∏—Å–ª–∞
// stringPair, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –¥–≤–∞ —Ä—è–¥–∫–∏

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é swap<T>(pair: Pair<T>): Pair<T>, —è–∫–∞ –º—ñ–Ω—è—î –º—ñ—Å—Ü—è–º–∏ first —ñ second.
// üîπ –ü—ñ–¥–∫–∞–∑–∫–∞
// –¢—É—Ç —Ç–µ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–∂–µ–Ω–µ—Ä–∏–∫ <T>, –∞–ª–µ –≤—Å–µ –Ω–∞–±–∞–≥–∞—Ç–æ –ø—Ä–æ—Å—Ç—ñ—à–µ, –±–æ –±–µ–∑ –º–µ—Ç–æ–¥—ñ–≤.

// –§—É–Ω–∫—Ü—ñ—è swap –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ Pair<T> —ñ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –Ω–æ–≤–∏–π Pair<T>.

// interface Pair<T> {
//   first: T;
//   second: T;
// }

// const numberPair: Pair<number> = {
//   first: 10,
//   second: 20,
// };

// const stringPair: Pair<string> = {
//   first: "first",
//   second: "second",
// };

// function swap<T>(pair: Pair<T>): Pair<T> {
//   return { first: pair.second, second: pair.first };
// }

// const swappedNumber = swap(numberPair);
// console.log(swappedNumber);

// const swappedString = swap(stringPair);
// console.log(swappedString);

// üîπ –ó–∞–≤–¥–∞–Ω–Ω—è: –ú–∞—Å–∏–≤ –ø–∞—Ä

// –°—Ç–≤–æ—Ä–∏ —Ç–∏–ø Pair<T> —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–∞–¥–∞—á—ñ (–¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É).

// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é getFirstElements<T>(pairs: Pair<T>[]): T[], —è–∫–∞ –∑ –º–∞—Å–∏–≤—É –ø–∞—Ä –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –ø–µ—Ä—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏.

// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é getSecondElements<T>(pairs: Pair<T>[]): T[], —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –¥—Ä—É–≥–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏.

// –ü–µ—Ä–µ–≤—ñ—Ä —Ä–æ–±–æ—Ç—É –Ω–∞:

// interface Pair<T> {
//   first: T;
//   second: T;
// }

// function getFirstElements<T>(pairs: Pair<T>[]): T[] {
//   return pairs.map((pair) => pair.first);
// }

// const numberPairs: Pair<number>[] = [
//   { first: 1, second: 2 },
//   { first: 3, second: 4 },
//   { first: 5, second: 6 },
// ];

// const stringPairs: Pair<string>[] = [
//   { first: "a", second: "b" },
//   { first: "c", second: "d" },
// ];

// console.log(getFirstElements(numberPairs));
// console.log(getFirstElements(stringPairs));
